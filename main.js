// Generated by CoffeeScript 1.6.2
/*Copyright 2013 Magnus Leo. All rights reserved.
*/


(function() {
  var Leo, LeoActor, LeoLayer, el, _camH, _camW, _camX, _camY, _frameBuffer, _frameBufferCtx, _latestFrameTime, _pressedKeys, _view, _viewCtx;

  el = function(id) {
    return document.getElementById(id);
  };

  _view = null;

  _viewCtx = null;

  _frameBuffer = document.createElement('canvas');

  _frameBufferCtx = _frameBuffer.getContext('2d');

  _latestFrameTime = Date.now();

  _pressedKeys = [];

  _camX = 0;

  _camY = 0;

  _camW = 0;

  _camH = 0;

  Leo = window.Leo = {
    init: function() {
      _view = el('leo-view');
      Leo._view = _view;
      _frameBuffer.width = _view.width;
      _frameBuffer.height = _view.height;
      _view.width = _view.width * Leo.view.scale;
      _view.height = _view.height * Leo.view.scale;
      _viewCtx = _view.getContext('2d');
      _viewCtx.imageSmoothingEnabled = _viewCtx.webkitImageSmoothingEnabled = _viewCtx.mozImageSmoothingEnabled = false;
      window.addEventListener('keydown', Leo.event._keydown);
      window.addEventListener('keyup', Leo.event._keyup);
      return window.requestAnimationFrame(Leo.cycle);
    },
    draw: function() {
      var actor, layer, _i, _j, _len, _len1, _ref, _ref1;

      _camX = Leo.view.cameraPosX * Leo.background.tileSize;
      _camY = Leo.view.cameraPosY * Leo.background.tileSize;
      _camW = Leo.view.cameraWidth * Leo.background.tileSize;
      _camH = Leo.view.cameraHeight * Leo.background.tileSize;
      _frameBufferCtx.fillStyle = Leo.background.color;
      _frameBufferCtx.fillRect(0, 0, _view.width, _view.height);
      _ref = Leo.layers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        layer.draw();
      }
      _ref1 = Leo.actors;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        actor = _ref1[_j];
        actor.draw();
      }
      return _viewCtx.drawImage(_frameBuffer, 0, 0, _frameBuffer.width * Leo.view.scale, _frameBuffer.height * Leo.view.scale);
    },
    cycle: function() {
      var actor, cycleLengthMs, cycleLengthS, thisFrameTime, _i, _len, _ref;

      thisFrameTime = Date.now();
      cycleLengthMs = thisFrameTime - _latestFrameTime;
      cycleLengthS = cycleLengthMs * 0.001;
      Leo.view.cameraPosX += Leo.view.cameraSpeedX * cycleLengthS;
      _ref = Leo.actors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        actor = _ref[_i];
        actor.advanceAnimation(cycleLengthMs);
        actor.posX += actor.speedX;
        actor.posY += actor.speedY;
      }
      Leo.draw();
      _latestFrameTime = thisFrameTime;
      window.requestAnimationFrame(Leo.cycle);
      return Leo.cycleCallback();
    },
    cycleCallback: function() {},
    view: {
      scale: 2,
      cameraPosX: 2.0,
      cameraPosY: 0.0,
      cameraSpeedX: 0.0,
      cameraSpeedY: 0.0,
      cameraWidth: 30,
      cameraHeight: 17
    },
    background: {
      tileSize: 16,
      color: '#6ec0ff'
    },
    actors: [],
    layers: [],
    event: {
      _keydown: function(e) {
        var keyIndex;

        e.preventDefault();
        keyIndex = _pressedKeys.indexOf(e.keyCode);
        if (keyIndex === -1) {
          _pressedKeys.push(e.keyCode);
          return Leo.event.keydown(e);
        }
      },
      keydown: function(e) {},
      _keyup: function(e) {
        var keyIndex;

        e.preventDefault();
        keyIndex = _pressedKeys.indexOf(e.keyCode);
        if (keyIndex !== -1) {
          _pressedKeys.splice(keyIndex, 1);
        }
        return Leo.event.keyup(e);
      },
      keyup: function(e) {}
    },
    sprites: {
      getImg: function(path) {
        var _img, _imgObj;

        _img = Leo.sprites._img;
        if (_img[path]) {
          return _img[path];
        } else {
          _imgObj = _img[path] = new Image();
          _imgObj.src = '_img/' + path;
          return _imgObj;
        }
      },
      remove: function(path) {
        var _img;

        _img = Leo.sprites._img;
        if (_img[path]) {
          return _img[path] = null;
        }
      },
      _img: {}
    },
    util: {
      KEY_CODES: {
        8: 'backspace',
        9: 'tab',
        13: 'enter',
        16: 'shift',
        17: 'ctrl',
        18: 'alt',
        19: 'pause/break',
        20: 'caps lock',
        27: 'escape',
        33: 'page up',
        34: 'page down',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        45: 'insert',
        46: 'delete',
        48: '0',
        49: '1',
        50: '2',
        51: '3',
        52: '4',
        53: '5',
        54: '6',
        55: '7',
        56: '8',
        57: '9',
        65: 'a',
        66: 'b',
        67: 'c',
        68: 'd',
        69: 'e',
        70: 'f',
        71: 'g',
        72: 'h',
        73: 'i',
        74: 'j',
        75: 'k',
        76: 'l',
        77: 'm',
        78: 'n',
        79: 'o',
        80: 'p',
        81: 'q',
        82: 'r',
        83: 's',
        84: 't',
        85: 'u',
        86: 'v',
        87: 'w',
        88: 'x',
        89: 'y',
        90: 'z',
        91: 'left window key',
        92: 'right window key',
        93: 'select key',
        96: 'numpad 0',
        97: 'numpad 1',
        98: 'numpad 2',
        99: 'numpad 3',
        100: 'numpad 4',
        101: 'numpad 5',
        102: 'numpad 6',
        103: 'numpad 7',
        104: 'numpad 8',
        105: 'numpad 9',
        106: 'multiply',
        106: '*',
        107: 'add',
        107: '+',
        109: 'subtract',
        110: 'decimal point',
        111: 'divide',
        112: 'f1',
        113: 'f2',
        114: 'f3',
        115: 'f4',
        116: 'f5',
        117: 'f6',
        118: 'f7',
        119: 'f8',
        120: 'f9',
        121: 'f10',
        122: 'f11',
        123: 'f12',
        144: 'num lock',
        145: 'scroll lock',
        186: 'semi-colon',
        186: ';',
        187: 'equal sign',
        187: '=',
        188: 'comma',
        188: ',',
        189: 'dash',
        189: '-',
        190: 'period',
        190: '.',
        191: 'forward slash',
        191: '/',
        192: 'grave accent',
        219: 'open bracket',
        219: '[',
        220: 'back slash',
        220: '\\',
        221: 'close braket',
        221: ']',
        222: 'single quote',
        222: '\''
      }
    }
  };

  LeoActor = (function() {
    function LeoActor(properties) {
      var key, val;

      this.spritesheet = '';
      this.animations = {
        example: {
          frames: [],
          doLoop: false,
          completeFallback: function() {}
        }
      };
      this.animFrameTimeLeft = 0;
      this.animFrame = 0;
      this.animName = '';
      this.posX = 0;
      this.posY = 0;
      this.speedX = 0;
      this.speedY = 0;
      for (key in properties) {
        val = properties[key];
        this[key] = val;
      }
      this.spriteImg = Leo.sprites.getImg(this.spritesheet);
    }

    LeoActor.prototype.draw = function() {
      var frame;

      frame = this.animations[this.animName].frames[this.animFrame];
      return _frameBufferCtx.drawImage(this.spriteImg, frame[0], frame[1], frame[2], frame[3], ((this.posX - Leo.view.cameraPosX) * Leo.background.tileSize + frame[4]) >> 0, ((this.posY - Leo.view.cameraPosY) * Leo.background.tileSize + frame[5]) >> 0, frame[2], frame[3]);
    };

    LeoActor.prototype.setAnimation = function(animName) {
      if (animName == null) {
        animName = '';
      }
      this.animFrame = 0;
      this.animFrameTimeLeft = this.animations[animName].frames[0][6];
      return this.animName = animName;
    };

    LeoActor.prototype.advanceAnimation = function(cycleLengthMs) {
      var animation, maxFrame, _results;

      animation = this.animations[this.animName];
      maxFrame = animation.frames.length - 1;
      if (this.animFrame > maxFrame) {
        this.animFrame = maxFrame;
      }
      this.animFrameTimeLeft -= cycleLengthMs;
      _results = [];
      while (this.animFrameTimeLeft < 0) {
        this.animFrame++;
        if (this.animFrame > maxFrame) {
          if (animation.doLoop) {
            this.animFrame = 0;
          } else {
            this.animFrame--;
          }
        }
        _results.push(this.animFrameTimeLeft = animation.frames[this.animFrame][6] + this.animFrameTimeLeft);
      }
      return _results;
    };

    return LeoActor;

  })();

  LeoLayer = (function() {
    function LeoLayer(properties) {
      var chunk, key, val, _i, _len, _ref;

      this.spritesheet = '';
      this.tileSize = 16;
      this.chunks = [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 0,
          tiles: []
        }
      ];
      this.isLooping = false;
      this.parallax = 1.0;
      for (key in properties) {
        val = properties[key];
        this[key] = val;
      }
      this.spriteImg = Leo.sprites.getImg(this.spritesheet);
      this.layerNumTilesX = 0;
      _ref = this.chunks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chunk = _ref[_i];
        chunk.drawBuffer = document.createElement('canvas');
        chunk.drawBufferCtx = chunk.drawBuffer.getContext('2d');
        chunk.drawBufferDirty = true;
        chunk.drawBuffer.width = chunk.tiles.length * this.tileSize;
        chunk.drawBuffer.height = chunk.tiles[0].length / 2 * this.tileSize;
        chunk.tileOffsetXPx = chunk.tileOffsetX * this.tileSize;
        this.layerNumTilesX += chunk.tiles.length + chunk.tileOffsetX;
      }
    }

    LeoLayer.prototype.draw = function() {
      var chunk, multiplier, posX, posY, _i, _j, _len, _len1, _ref, _ref1;

      if (this.isLooping) {
        chunk = this.chunks[0];
        posX = ((chunk.tileOffsetX - Leo.view.cameraPosX + chunk.chunkOffsetX) * Leo.background.tileSize * this.parallax) >> 0;
        multiplier = ((Leo.view.cameraPosX / this.layerNumTilesX * this.parallax) >> 0) - 1;
        posX += this.layerNumTilesX * Leo.background.tileSize * multiplier;
        while (posX < _camW) {
          _ref = this.chunks;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            chunk = _ref[_i];
            posY = ((chunk.tileOffsetY - Leo.view.cameraPosY + chunk.chunkOffsetY) * Leo.background.tileSize) >> 0;
            this.drawChunk(chunk, posX, posY);
            posX += chunk.drawBuffer.width + chunk.tileOffsetXPx;
          }
        }
      } else {
        _ref1 = this.chunks;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          chunk = _ref1[_j];
          posX = ((chunk.tileOffsetX - Leo.view.cameraPosX + chunk.chunkOffsetX) * Leo.background.tileSize * this.parallax) >> 0;
          posY = ((chunk.tileOffsetY - Leo.view.cameraPosY + chunk.chunkOffsetY) * Leo.background.tileSize) >> 0;
          this.drawChunk(chunk, posX, posY);
        }
      }
    };

    LeoLayer.prototype.drawChunk = function(chunk, posX, posY) {
      var column, tile, x, y, _i, _j, _len, _len1, _ref;

      if (posX < -chunk.drawBuffer.width || posX > _camW || posY < -chunk.drawBuffer.height || posY > _camH) {
        return;
      }
      if (chunk.drawBufferDirty) {
        _ref = chunk.tiles;
        for (x = _i = 0, _len = _ref.length; _i < _len; x = ++_i) {
          column = _ref[x];
          for (y = _j = 0, _len1 = column.length; _j < _len1; y = _j += 2) {
            tile = column[y];
            this.drawTile(chunk.drawBufferCtx, column[y], column[y + 1], x * Leo.background.tileSize, ((y >> 1) + chunk.chunkOffsetY) * Leo.background.tileSize);
          }
        }
        chunk.drawBufferDirty = false;
      }
      return _frameBufferCtx.drawImage(chunk.drawBuffer, 0, 0, chunk.drawBuffer.width, chunk.drawBuffer.height, posX, posY, chunk.drawBuffer.width, chunk.drawBuffer.height);
    };

    LeoLayer.prototype.drawTile = function(ctx, spriteX, spriteY, posX, posY) {
      if (spriteX === -1 || spriteY === -1) {
        return;
      }
      return ctx.drawImage(this.spriteImg, spriteX * this.tileSize, spriteY * this.tileSize, this.tileSize, this.tileSize, posX >> 0, posY >> 0, this.tileSize, this.tileSize);
    };

    return LeoLayer;

  })();

  window.onload = function() {
    Leo.init();
    Leo.actors.push(new LeoActor({
      spritesheet: 'sprite-olle.png',
      animations: {
        runningLeft: {
          frames: [[19, 33, 30, 32, -4, 0, 192], [49, 33, 13, 32, 4, 0, 192]],
          doLoop: true
        },
        runningRight: {
          frames: [[19, 0, 30, 32, -8, 0, 192], [49, 0, 13, 32, 1, 0, 192]],
          doLoop: true
        },
        standingLeft: {
          frames: [[0, 33, 19, 32, 1, 0, 1000]],
          doLoop: false
        },
        standingRight: {
          frames: [[0, 0, 19, 32, -1, 0, 1000]],
          doLoop: false
        }
      },
      animName: 'standingRight',
      posX: 6,
      posY: 12
    }));
    Leo.player = Leo.actors[Leo.actors.length - 1];
    Leo.event.keydown = function(e) {
      switch (Leo.util.KEY_CODES[e.keyCode]) {
        case 'left':
          Leo.player.speedX = -0.15;
          return Leo.player.setAnimation('runningLeft');
        case 'right':
          Leo.player.speedX = 0.15;
          return Leo.player.setAnimation('runningRight');
        case 'r':
          return window.location.reload();
      }
    };
    Leo.event.keyup = function(e) {
      switch (Leo.util.KEY_CODES[e.keyCode]) {
        case 'left':
          Leo.player.setAnimation('standingLeft');
          return Leo.player.speedX = 0;
        case 'right':
          Leo.player.setAnimation('standingRight');
          return Leo.player.speedX = 0;
      }
    };
    Leo.cycleCallback = function() {
      return Leo.view.cameraPosX = Leo.player.posX - 15;
    };
    Leo.layers.push(new LeoLayer({
      name: 'mountains',
      spritesheet: 'sprite-background.png',
      isLooping: true,
      parallax: 0.5,
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 10,
          tiles: [[-1, -1, 4, 1, 4, 2, 4, 3, 4, 3, 4, 4, 7, 0], [5, 0, 5, 1, 5, 2, 5, 3, 5, 4, 4, 4, 8, 0], [6, 0, 6, 1, 6, 2, 6, 3, 6, 3, 4, 4, 9, 0], [-1, -1, 7, 1, 7, 2, 7, 3, 7, 4, 4, 4, 10, 0], [-1, -1, -1, -1, 8, 2, 8, 3, 8, 4, 4, 4, 11, 0], [-1, -1, -1, -1, -1, -1, 9, 3, 9, 4, 4, 4, 7, 0], [-1, -1, -1, -1, 10, 2, 10, 3, 10, 4, 4, 4, 8, 0], [-1, -1, 11, 1, 11, 2, 11, 3, 11, 4, 4, 4, 9, 0], [-1, -1, 12, 1, 12, 2, 12, 3, 12, 4, 4, 4, 10, 0], [-1, -1, -1, -1, 13, 2, 13, 3, 13, 4, 4, 4, 11, 0]]
        }
      ]
    }));
    Leo.layers.push(new LeoLayer({
      name: 'cloud 1',
      spritesheet: 'sprite-background.png',
      isLooping: true,
      parallax: 0.21,
      chunks: [
        {
          chunkOffsetX: 50,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 30,
          tileOffsetY: 3,
          tiles: [[0, 0, 0, 1], [1, 0, 1, 1], [2, 0, 2, 1], [3, 0, 3, 1]]
        }
      ]
    }));
    Leo.layers.push(new LeoLayer({
      name: 'cloud 2',
      spritesheet: 'sprite-background.png',
      isLooping: true,
      parallax: 0.2,
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 29,
          tileOffsetY: 5,
          tiles: [[0, 0, 0, 1], [1, 0, 1, 1], [2, 0, 2, 1], [3, 0, 3, 1]]
        }
      ]
    }));
    return Leo.layers.push(new LeoLayer({
      name: 'ground',
      spritesheet: 'sprite-background.png',
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 0, 2, 0, 3, 0, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [4, 0, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3]]
        }, {
          chunkOffsetX: 30,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [4, 0, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 3, 2, 3, 3, 3, 3]]
        }
      ]
    }));
  };

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
