// Generated by CoffeeScript 1.6.2
/*Copyright 2013 Magnus Leo. All rights reserved.
*/


(function() {
  var Leo, LeoActor, canvas, ctx, el, latestFrameTime;

  el = function(id) {
    return document.getElementById(id);
  };

  canvas = null;

  ctx = null;

  latestFrameTime = Date.now();

  Leo = window.Leo = {
    init: function() {
      canvas = el('leo-view');
      canvas.width = canvas.width * Leo.view.scale;
      canvas.height = canvas.height * Leo.view.scale;
      ctx = canvas.getContext('2d');
      ctx.imageSmoothingEnabled = false;
      ctx.webkitImageSmoothingEnabled = false;
      Leo.background.sprite = new Image();
      Leo.background.sprite.onload = function() {
        setInterval(function() {
          return Leo.view.cameraPosX = 0.0;
        }, 15000);
        return webkitRequestAnimationFrame(Leo.cycle);
      };
      return Leo.background.sprite.src = '_img/sprite-background.png';
    },
    draw: function() {
      var actor, chunk, column, frame, tile, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;

      ctx.fillStyle = Leo.background.color;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      _ref = Leo.view.chunks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chunk = _ref[_i];
        _ref1 = chunk.tiles;
        for (x = _j = 0, _len1 = _ref1.length; _j < _len1; x = ++_j) {
          column = _ref1[x];
          for (y = _k = 0, _len2 = column.length; _k < _len2; y = _k += 2) {
            tile = column[y];
            Leo.background.draw(column[y], column[y + 1], (x + chunk.tileOffsetX + Leo.view.cameraPosX + chunk.chunkOffsetX) * Leo.background.tileSize * Leo.view.scale, ((y >> 1) + chunk.tileOffsetY + Leo.view.cameraPosY + chunk.chunkOffsetY) * Leo.background.tileSize * Leo.view.scale);
          }
        }
      }
      _ref2 = Leo.actors;
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        actor = _ref2[_l];
        frame = actor.animations[actor.animName].frames[actor.animFrame];
        ctx.drawImage(actor.spriteImg, frame[0], frame[1], frame[2], frame[3], (actor.posX + frame[4]) * Leo.view.scale, (actor.posY + frame[5]) * Leo.view.scale, frame[2] * Leo.view.scale, frame[3] * Leo.view.scale);
      }
      Leo.background.draw(3, 0, 5 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(4, 0, 6 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(5, 0, 7 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(6, 0, 8 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(3, 1, 5 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(4, 1, 6 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(5, 1, 7 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
      return Leo.background.draw(6, 1, 8 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
    },
    cycle: function() {
      var actor, animation, cycleLengthMs, cycleLengthS, maxFrame, thisFrameTime, _i, _len, _ref;

      thisFrameTime = Date.now();
      cycleLengthMs = thisFrameTime - latestFrameTime;
      cycleLengthS = cycleLengthMs * 0.001;
      Leo.view.cameraPosX += Leo.view.cameraSpeedX * cycleLengthS;
      _ref = Leo.actors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        actor = _ref[_i];
        animation = actor.animations[actor.animName];
        maxFrame = animation.frames.length - 1;
        actor.animFrameTimeLeft -= cycleLengthMs;
        while (actor.animFrameTimeLeft < 0) {
          actor.animFrame++;
          if (actor.animFrame > maxFrame) {
            if (animation.doLoop) {
              actor.animFrame = 0;
            }
          }
          actor.animFrameTimeLeft = animation.frames[actor.animFrame][6] + actor.animFrameTimeLeft;
        }
      }
      Leo.draw();
      latestFrameTime = thisFrameTime;
      return webkitRequestAnimationFrame(Leo.cycle);
    },
    view: {
      scale: 2,
      cameraPosX: 0.0,
      cameraPosY: 0.0,
      cameraSpeedX: -2.0,
      cameraSpeedY: 0.0,
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1]]
        }, {
          chunkOffsetX: 30,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1]]
        }
      ]
    },
    background: {
      tileSize: 16,
      color: '#6ec0ff',
      draw: function(spriteX, spriteY, posX, posY) {
        if (spriteX === -1 || spriteY === -1) {
          return;
        }
        return ctx.drawImage(this.sprite, spriteX * this.tileSize, spriteY * this.tileSize, this.tileSize, this.tileSize, posX, posY, this.tileSize * Leo.view.scale, this.tileSize * Leo.view.scale);
      }
    },
    actors: []
  };

  LeoActor = (function() {
    function LeoActor(properties) {
      var key, val;

      this.spritesheet = "";
      this.animations = {
        example: {
          frames: [],
          doLoop: false,
          completeFallback: function() {}
        }
      };
      this.animFrameTimeLeft = 0;
      this.animFrame = 0;
      this.animName = "";
      this.posX = 0;
      this.posY = 0;
      this.speedX = 0;
      this.speedY = 0;
      for (key in properties) {
        val = properties[key];
        this[key] = val;
      }
      this.spriteImg = new Image();
      this.spriteImg.src = '_img/' + this.spritesheet;
    }

    return LeoActor;

  })();

  window.onload = function() {
    Leo.init();
    return Leo.actors.push(new LeoActor({
      spritesheet: "sprite-olle.png",
      animations: {
        running: {
          frames: [[19, 0, 30, 32, -9, 0, 192], [49, 0, 13, 32, 0, 0, 192]],
          doLoop: true
        }
      },
      animName: "running",
      posX: 128,
      posY: 192
    }));
  };

}).call(this);
