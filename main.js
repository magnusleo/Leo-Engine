// Generated by CoffeeScript 1.6.2
/*Copyright 2013 Magnus Leo. All rights reserved.
*/


(function() {
  var Actor, Layer, Leo, Player, PlayerState, PlayerStateAir, PlayerStateGround, PlayerStateJumping, PlayerStateRunning, PlayerStateStanding, _camH, _camW, _camX, _camY, _editTile, _frameBuffer, _frameBufferCtx, _latestFrameTime, _pressedKeys, _view, _viewCtx,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Leo = window.Leo = {};

  _view = null;

  _viewCtx = null;

  _frameBuffer = document.createElement('canvas');

  _frameBufferCtx = _frameBuffer.getContext('2d');

  _latestFrameTime = Date.now();

  _pressedKeys = [];

  _camX = 0;

  _camY = 0;

  _camW = 0;

  _camH = 0;

  _editTile = [-1, -1];

  Leo.environment = {
    gravity: 1.0
  };

  Leo.view = {
    scale: 2,
    cameraPosX: 2.0,
    cameraPosY: 0.0,
    cameraSpeedX: 0.0,
    cameraSpeedY: 0.0,
    cameraWidth: 30,
    cameraHeight: 17
  };

  Leo.background = {
    tileSize: 16,
    color: '#6ec0ff'
  };

  Leo.actors = [];

  Leo.core = {};

  Leo.core.init = function() {
    _view = document.getElementById('leo-view');
    Leo._view = _view;
    _frameBuffer.width = _view.width;
    _frameBuffer.height = _view.height;
    _view.width = _view.width * Leo.view.scale;
    _view.height = _view.height * Leo.view.scale;
    _viewCtx = _view.getContext('2d');
    _viewCtx.imageSmoothingEnabled = _viewCtx.webkitImageSmoothingEnabled = _viewCtx.mozImageSmoothingEnabled = false;
    _view.addEventListener('mousedown', function(e) {
      var camX, camY, chunkH, chunkW, chunkX, chunkY, layer, mouseX, mouseY, scale, tile, tileSize, tileX, tileY;

      if (e.button !== 0) {
        return;
      }
      e.preventDefault();
      mouseX = e.offsetX;
      mouseY = e.offsetY;
      camX = Leo.view.cameraPosX;
      camY = Leo.view.cameraPosY;
      scale = Leo.view.scale;
      chunkW = Leo.view.cameraWidth;
      chunkH = Leo.view.cameraHeight;
      tileSize = Leo.background.tileSize;
      chunkX = ((camX + mouseX / scale / tileSize) / chunkW) >> 0;
      tileX = (mouseX / scale / tileSize - (chunkX * chunkW - camX)) >> 0;
      chunkY = ((camY + mouseY / scale / tileSize) / chunkH) >> 0;
      tileY = (mouseY / scale / tileSize - (chunkY * chunkH - camY)) >> 0;
      layer = Leo.layers.get('ground');
      tile = layer.getTile(chunkX, tileX, tileY);
      if (e.altKey) {
        return _editTile = tile;
      } else {
        return layer.setTile(chunkX, tileX, tileY, _editTile);
      }
    });
    _view.addEventListener('mouseup', function(e) {
      return e.preventDefault();
    });
    window.addEventListener('keydown', Leo.event._keydown);
    window.addEventListener('keyup', Leo.event._keyup);
    return window.requestAnimationFrame(Leo.core.cycle);
  };

  Leo.core.draw = function() {
    var actor, layer, _i, _j, _len, _len1, _ref, _ref1;

    _camX = Leo.view.cameraPosX * Leo.background.tileSize;
    _camY = Leo.view.cameraPosY * Leo.background.tileSize;
    _camW = Leo.view.cameraWidth * Leo.background.tileSize;
    _camH = Leo.view.cameraHeight * Leo.background.tileSize;
    _frameBufferCtx.fillStyle = Leo.background.color;
    _frameBufferCtx.fillRect(0, 0, _view.width, _view.height);
    _ref = Leo.layers.objects;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      layer.draw();
    }
    _ref1 = Leo.actors;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      actor = _ref1[_j];
      actor.draw();
    }
    return _viewCtx.drawImage(_frameBuffer, 0, 0, _frameBuffer.width * Leo.view.scale, _frameBuffer.height * Leo.view.scale);
  };

  Leo.core.cycle = function() {
    var actor, cycleLengthMs, cycleLengthS, thisFrameTime, _i, _len, _ref;

    thisFrameTime = Date.now();
    cycleLengthMs = thisFrameTime - _latestFrameTime;
    cycleLengthS = cycleLengthMs * 0.001;
    Leo.view.cameraPosX += Leo.view.cameraSpeedX * cycleLengthS;
    _ref = Leo.actors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      actor = _ref[_i];
      actor.update(cycleLengthMs);
    }
    Leo.core.draw();
    _latestFrameTime = thisFrameTime;
    window.requestAnimationFrame(Leo.core.cycle);
    return Leo.cycleCallback();
  };

  Leo.cycleCallback = function() {};

  Leo.event = {};

  Leo.event._keydown = function(e) {
    var keyIndex;

    e.preventDefault();
    keyIndex = _pressedKeys.indexOf(e.keyCode);
    if (keyIndex === -1) {
      _pressedKeys.push(e.keyCode);
      return Leo.event.keydown(e);
    }
  };

  Leo.event.keydown = function(e) {};

  Leo.event._keyup = function(e) {
    var keyIndex;

    e.preventDefault();
    keyIndex = _pressedKeys.indexOf(e.keyCode);
    if (keyIndex !== -1) {
      _pressedKeys.splice(keyIndex, 1);
    }
    return Leo.event.keyup(e);
  };

  Leo.event.keyup = function(e) {};

  Leo.sprite = {};

  Leo.sprite.getImg = function(path) {
    var _img, _imgObj;

    _img = Leo.sprite._img;
    if (_img[path]) {
      return _img[path];
    } else {
      _imgObj = _img[path] = new Image();
      _imgObj.src = '_img/' + path;
      return _imgObj;
    }
  };

  Leo.sprite.remove = function(path) {
    var _img;

    _img = Leo.sprite._img;
    if (_img[path]) {
      return _img[path] = null;
    }
  };

  Leo.sprite._img = {};

  Leo.layers = {};

  Leo.layers.objects = [];

  Leo.layers.add = function(layerObj) {
    if (!(layerObj instanceof Layer) || !layerObj.id || Leo.layers.get(layerObj.id)) {
      return null;
    }
    return Leo.layers.objects.push(layerObj);
  };

  Leo.layers.get = function(id) {
    var layerObj, _i, _len, _ref;

    _ref = Leo.layers.objects;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layerObj = _ref[_i];
      if (layerObj.id === id) {
        return layerObj;
      }
    }
    return null;
  };

  Leo.util = {};

  Leo.util.KEY_CODES = {
    'BACKSPACE': 8,
    'TAB': 9,
    'ENTER': 13,
    'SHIFT': 16,
    'CTRL': 17,
    'ALT': 18,
    'PAUSE_BREAK': 19,
    'CAPS_LOCK': 20,
    'ESCAPE': 27,
    'PAGE_UP': 33,
    'PAGE_DOWN': 34,
    'END': 35,
    'HOME': 36,
    'LEFT': 37,
    'UP': 38,
    'RIGHT': 39,
    'DOWN': 40,
    'INSERT': 45,
    'DELETE': 46,
    '0': 48,
    '1': 49,
    '2': 50,
    '3': 51,
    '4': 52,
    '5': 53,
    '6': 54,
    '7': 55,
    '8': 56,
    '9': 57,
    'A': 65,
    'B': 66,
    'C': 67,
    'D': 68,
    'E': 69,
    'F': 70,
    'G': 71,
    'H': 72,
    'I': 73,
    'J': 74,
    'K': 75,
    'L': 76,
    'M': 77,
    'N': 78,
    'O': 79,
    'P': 80,
    'Q': 81,
    'R': 82,
    'S': 83,
    'T': 84,
    'U': 85,
    'V': 86,
    'W': 87,
    'X': 88,
    'Y': 89,
    'Z': 90,
    'LEFT_WINDOW_KEY': 91,
    'RIGHT_WINDOW_KEY': 92,
    'SELECT_KEY': 93,
    'NUMPAD_0': 96,
    'NUMPAD_1': 97,
    'NUMPAD_2': 98,
    'NUMPAD_3': 99,
    'NUMPAD_4': 100,
    'NUMPAD_5': 101,
    'NUMPAD_6': 102,
    'NUMPAD_7': 103,
    'NUMPAD_8': 104,
    'NUMPAD_9': 105,
    'MULTIPLY': 106,
    '*': 106,
    'ADD': 107,
    '+': 107,
    'SUBTRACT': 109,
    'DECIMAL_POINT': 110,
    'DIVIDE': 111,
    'F1': 112,
    'F2': 113,
    'F3': 114,
    'F4': 115,
    'F5': 116,
    'F6': 117,
    'F7': 118,
    'F8': 119,
    'F9': 120,
    'F10': 121,
    'F11': 122,
    'F12': 123,
    'NUM_LOCK': 144,
    'SCROLL_LOCK': 145,
    'SEMI-COLON': 186,
    ';': 186,
    'EQUAL_SIGN': 187,
    '=': 187,
    'COMMA': 188,
    ',': 188,
    'DASH': 189,
    '-': 189,
    'PERIOD': 190,
    '.': 190,
    'FORWARD_SLASH': 191,
    '/': 191,
    'GRAVE_ACCENT': 192,
    'OPEN_BRACKET': 219,
    '[': 219,
    'BACK_SLASH': 220,
    '\\': 220,
    'CLOSE_BRAKET': 221,
    ']': 221,
    'SINGLE_QUOTE': 222,
    '\'': 222
  };

  Leo.Actor = Actor = (function() {
    function Actor(properties) {
      var key, val;

      this.spritesheet = '';
      this.animations = {
        example: {
          frames: [],
          doLoop: false,
          completeFallback: function() {}
        }
      };
      this.animFrameTimeLeft = 0;
      this.animFrame = 0;
      this.animName = '';
      this.posX = 0;
      this.posY = 0;
      this.speedX = 0;
      this.speedY = 0;
      for (key in properties) {
        val = properties[key];
        this[key] = val;
      }
      this.spriteImg = Leo.sprite.getImg(this.spritesheet);
    }

    Actor.prototype.draw = function() {
      var frame;

      frame = this.animations[this.animName].frames[this.animFrame];
      return _frameBufferCtx.drawImage(this.spriteImg, frame[0], frame[1], frame[2], frame[3], ((this.posX - Leo.view.cameraPosX) * Leo.background.tileSize + frame[4]) >> 0, ((this.posY - Leo.view.cameraPosY) * Leo.background.tileSize + frame[5]) >> 0, frame[2], frame[3]);
    };

    Actor.prototype.setAnimation = function(animName, animFrame) {
      if (animName == null) {
        animName = '';
      }
      if (animFrame == null) {
        animFrame = 0;
      }
      this.animFrame = animFrame;
      this.animFrameTimeLeft = this.animations[animName].frames[0][6];
      return this.animName = animName;
    };

    Actor.prototype.advanceAnimation = function(cycleLengthMs) {
      var animation, maxFrame, _results;

      animation = this.animations[this.animName];
      maxFrame = animation.frames.length - 1;
      if (this.animFrame > maxFrame) {
        this.animFrame = maxFrame;
      }
      this.animFrameTimeLeft -= cycleLengthMs;
      _results = [];
      while (this.animFrameTimeLeft < 0) {
        this.animFrame++;
        if (this.animFrame > maxFrame) {
          if (animation.doLoop) {
            this.animFrame = 0;
          } else {
            this.animFrame--;
          }
        }
        _results.push(this.animFrameTimeLeft = animation.frames[this.animFrame][6] + this.animFrameTimeLeft);
      }
      return _results;
    };

    Actor.prototype.update = function(cycleLengthMs) {
      this.advanceAnimation(cycleLengthMs);
      this.posX += this.speedX;
      return this.posY += this.speedY;
    };

    return Actor;

  })();

  Leo.Player = Player = (function(_super) {
    __extends(Player, _super);

    function Player(data) {
      Player.__super__.constructor.call(this, data);
      Leo.actors.push(this);
      this.state = new PlayerStateStanding(this);
      this.stateBefore = null;
    }

    Player.prototype.setState = function(state) {
      if (this.state === state) {
        return;
      }
      this.stateBefore = this.state;
      return this.state = new state(this);
    };

    Player.prototype.handleInput = function(e) {
      return this.state.handleInput(e);
    };

    Player.prototype.update = function(cycleLengthMs) {
      this.speedY += Leo.environment.gravity * cycleLengthMs * 0.001;
      Player.__super__.update.call(this, cycleLengthMs);
      this.state.update(cycleLengthMs);
      if (this.posY > 12) {
        return this.posY = 12;
      }
    };

    return Player;

  })(Actor);

  Leo.PlayerState = PlayerState = (function() {
    function PlayerState(parent) {
      this.parent = parent;
    }

    PlayerState.prototype.handleInput = function(e) {
      var key;

      key = Leo.util.KEY_CODES;
      switch (e.keyCode) {
        case key.LEFT:
          return this.parent.direction = -1;
        case key.RIGHT:
          return this.parent.direction = 1;
      }
    };

    PlayerState.prototype.update = function(cycleLengthMs) {};

    return PlayerState;

  })();

  Leo.PlayerStateGround = PlayerStateGround = (function(_super) {
    __extends(PlayerStateGround, _super);

    function PlayerStateGround(data) {
      PlayerStateGround.__super__.constructor.call(this, data);
    }

    PlayerStateGround.prototype.handleInput = function(e) {
      var key;

      PlayerStateGround.__super__.handleInput.call(this, e);
      key = Leo.util.KEY_CODES;
      if (e.type === 'keydown') {
        switch (e.keyCode) {
          case key.UP:
          case key.Z:
            return this.parent.setState(PlayerStateJumping);
        }
      }
    };

    return PlayerStateGround;

  })(PlayerState);

  Leo.PlayerStateStanding = PlayerStateStanding = (function(_super) {
    __extends(PlayerStateStanding, _super);

    function PlayerStateStanding(data) {
      PlayerStateStanding.__super__.constructor.call(this, data);
      this.parent.speedX = 0;
      if (this.parent.direction > 0) {
        this.parent.setAnimation('standingRight');
      } else {
        this.parent.setAnimation('standingLeft');
      }
    }

    PlayerStateStanding.prototype.handleInput = function(e) {
      var key;

      PlayerStateStanding.__super__.handleInput.call(this, e);
      key = Leo.util.KEY_CODES;
      if (e.type === 'keydown') {
        switch (e.keyCode) {
          case key.LEFT:
          case key.RIGHT:
            return this.parent.setState(PlayerStateRunning);
        }
      }
    };

    return PlayerStateStanding;

  })(PlayerStateGround);

  Leo.PlayerStateRunning = PlayerStateRunning = (function(_super) {
    __extends(PlayerStateRunning, _super);

    function PlayerStateRunning(data) {
      PlayerStateRunning.__super__.constructor.call(this, data);
      this._setSpeedAndAnim();
      if (this.parent.stateBefore instanceof PlayerStateAir) {
        this.parent.animFrame = 1;
      }
    }

    PlayerStateRunning.prototype.handleInput = function(e) {
      var key, keyIndexLeft, keyIndexRight;

      PlayerStateRunning.__super__.handleInput.call(this, e);
      key = Leo.util.KEY_CODES;
      if (e.type === 'keydown') {
        switch (e.keyCode) {
          case key.LEFT:
          case key.RIGHT:
            return this._setSpeedAndAnim();
        }
      } else if (e.type === 'keyup') {
        switch (e.keyCode) {
          case key.LEFT:
          case key.RIGHT:
            keyIndexLeft = _pressedKeys.indexOf(key.LEFT);
            keyIndexRight = _pressedKeys.indexOf(key.RIGHT);
            if (keyIndexLeft === -1 && keyIndexRight === -1) {
              return this.parent.setState(PlayerStateStanding);
            } else if (keyIndexLeft === -1 && keyIndexRight > -1) {
              this.parent.direction = 1;
              return this._setSpeedAndAnim({
                animFrame: 1
              });
            } else {
              this.parent.direction = -1;
              return this._setSpeedAndAnim({
                animFrame: 1
              });
            }
        }
      }
    };

    PlayerStateRunning.prototype._setSpeedAndAnim = function(options) {
      if (options == null) {
        options = {};
      }
      this.parent.speedX = 0.15 * this.parent.direction;
      if (this.parent.direction > 0) {
        return this.parent.setAnimation('runningRight', options.animFrame);
      } else {
        return this.parent.setAnimation('runningLeft', options.animFrame);
      }
    };

    return PlayerStateRunning;

  })(PlayerStateGround);

  Leo.PlayerStateAir = PlayerStateAir = (function(_super) {
    __extends(PlayerStateAir, _super);

    function PlayerStateAir(data) {
      PlayerStateAir.__super__.constructor.call(this, data);
    }

    PlayerStateAir.prototype.handleInput = function(e) {
      return PlayerStateAir.__super__.handleInput.call(this, e);
    };

    PlayerStateAir.prototype.update = function(cycleLengthMs) {
      PlayerStateAir.__super__.update.call(this, cycleLengthMs);
      if (this.parent.posY >= 12) {
        if (this.parent.speedX === 0) {
          return this.parent.setState(PlayerStateStanding);
        } else {
          return this.parent.setState(PlayerStateRunning);
        }
      }
    };

    return PlayerStateAir;

  })(PlayerState);

  Leo.PlayerStateJumping = PlayerStateJumping = (function(_super) {
    __extends(PlayerStateJumping, _super);

    function PlayerStateJumping(data) {
      PlayerStateJumping.__super__.constructor.call(this, data);
      this.parent.speedY = -0.35;
      if (this.parent.direction > 0) {
        this.parent.setAnimation('jumpingRight');
      } else {
        this.parent.setAnimation('jumpingLeft');
      }
    }

    PlayerStateJumping.prototype.handleInput = function(e) {
      var key, keyIndexLeft, keyIndexRight;

      PlayerStateJumping.__super__.handleInput.call(this, e);
      key = Leo.util.KEY_CODES;
      if (e.type === 'keydown') {
        switch (e.keyCode) {
          case key.LEFT:
            this.parent.direction = -1;
            return this._setSpeedAndAnim();
          case key.RIGHT:
            this.parent.direction = 1;
            return this._setSpeedAndAnim();
        }
      } else if (e.type === 'keyup') {
        switch (e.keyCode) {
          case key.LEFT:
          case key.RIGHT:
            keyIndexLeft = _pressedKeys.indexOf(key.LEFT);
            keyIndexRight = _pressedKeys.indexOf(key.RIGHT);
            if (keyIndexLeft === -1 && keyIndexRight === -1) {
              return this.parent.speedX = 0;
            } else if (keyIndexLeft === -1 && keyIndexRight > -1) {
              this.parent.direction = 1;
              return this._setSpeedAndAnim();
            } else {
              this.parent.direction = -1;
              return this._setSpeedAndAnim();
            }
        }
      }
    };

    PlayerStateJumping.prototype._setSpeedAndAnim = function() {
      this.parent.speedX = 0.15 * this.parent.direction;
      if (this.parent.direction > 0) {
        return this.parent.setAnimation('jumpingRight');
      } else {
        return this.parent.setAnimation('jumpingLeft');
      }
    };

    return PlayerStateJumping;

  })(PlayerStateAir);

  Leo.Layer = Layer = (function() {
    function Layer(properties) {
      var chunk, key, layer, val, _i, _len, _ref;

      this.spritesheet = '';
      this.tileSize = 16;
      this.chunks = [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 0,
          tiles: []
        }
      ];
      this.isLooping = false;
      this.parallax = 1.0;
      for (key in properties) {
        val = properties[key];
        this[key] = val;
      }
      this.spriteImg = Leo.sprite.getImg(this.spritesheet);
      layer = this;
      this.spriteImg.addEventListener('load', function() {
        var chunk, _i, _len, _ref;

        if (!layer.chunks) {
          return;
        }
        _ref = layer.chunks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          chunk = _ref[_i];
          chunk.drawBufferDirty = true;
        }
      });
      this.layerNumTilesX = 0;
      _ref = this.chunks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chunk = _ref[_i];
        chunk.drawBuffer = document.createElement('canvas');
        chunk.drawBufferCtx = chunk.drawBuffer.getContext('2d');
        chunk.drawBufferDirty = true;
        chunk.drawBuffer.width = chunk.tiles.length * this.tileSize;
        chunk.drawBuffer.height = chunk.tiles[0].length / 2 * this.tileSize;
        chunk.tileOffsetXPx = chunk.tileOffsetX * this.tileSize;
        this.layerNumTilesX += chunk.tiles.length + chunk.tileOffsetX;
      }
    }

    Layer.prototype.draw = function() {
      var chunk, multiplier, posX, posY, _i, _j, _len, _len1, _ref, _ref1;

      if (this.isLooping) {
        chunk = this.chunks[0];
        posX = ((chunk.tileOffsetX - Leo.view.cameraPosX + chunk.chunkOffsetX) * Leo.background.tileSize * this.parallax) >> 0;
        multiplier = ((Leo.view.cameraPosX / this.layerNumTilesX * this.parallax) >> 0) - 1;
        posX += this.layerNumTilesX * Leo.background.tileSize * multiplier;
        while (posX < _camW) {
          _ref = this.chunks;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            chunk = _ref[_i];
            posY = ((chunk.tileOffsetY - Leo.view.cameraPosY + chunk.chunkOffsetY) * Leo.background.tileSize) >> 0;
            this.drawChunk(chunk, posX, posY);
            posX += chunk.drawBuffer.width + chunk.tileOffsetXPx;
          }
        }
      } else {
        _ref1 = this.chunks;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          chunk = _ref1[_j];
          posX = ((chunk.tileOffsetX - Leo.view.cameraPosX + chunk.chunkOffsetX) * Leo.background.tileSize * this.parallax) >> 0;
          posY = ((chunk.tileOffsetY - Leo.view.cameraPosY + chunk.chunkOffsetY) * Leo.background.tileSize) >> 0;
          this.drawChunk(chunk, posX, posY);
        }
      }
    };

    Layer.prototype.drawChunk = function(chunk, posX, posY) {
      var column, tile, x, y, _i, _j, _len, _len1, _ref;

      if (posX < -chunk.drawBuffer.width || posX > _camW || posY < -chunk.drawBuffer.height || posY > _camH) {
        return;
      }
      if (chunk.drawBufferDirty) {
        chunk.drawBufferCtx.clearRect(0, 0, chunk.drawBuffer.width, chunk.drawBuffer.height);
        _ref = chunk.tiles;
        for (x = _i = 0, _len = _ref.length; _i < _len; x = ++_i) {
          column = _ref[x];
          for (y = _j = 0, _len1 = column.length; _j < _len1; y = _j += 2) {
            tile = column[y];
            this.drawTile(chunk.drawBufferCtx, column[y], column[y + 1], x * Leo.background.tileSize, ((y >> 1) + chunk.chunkOffsetY) * Leo.background.tileSize);
          }
        }
        chunk.drawBufferDirty = false;
      }
      return _frameBufferCtx.drawImage(chunk.drawBuffer, 0, 0, chunk.drawBuffer.width, chunk.drawBuffer.height, posX, posY, chunk.drawBuffer.width, chunk.drawBuffer.height);
    };

    Layer.prototype.drawTile = function(ctx, spriteX, spriteY, posX, posY) {
      if (spriteX === -1 || spriteY === -1) {
        return;
      }
      return ctx.drawImage(this.spriteImg, spriteX * this.tileSize, spriteY * this.tileSize, this.tileSize, this.tileSize, posX >> 0, posY >> 0, this.tileSize, this.tileSize);
    };

    Layer.prototype.getTile = function(chunkX, tileX, tileY) {
      var chunk, column, tile, x, y;

      chunk = this.chunks[chunkX];
      x = tileX - chunk.tileOffsetX;
      y = (tileY - chunk.tileOffsetY) * 2;
      column = chunk.tiles[x];
      tile = [column[y], column[y + 1]];
      return tile;
    };

    Layer.prototype.setTile = function(chunkX, tileX, tileY, tile) {
      var chunk, column, x, y;

      chunk = this.chunks[chunkX];
      chunk.drawBufferDirty = true;
      x = tileX - chunk.tileOffsetX;
      y = (tileY - chunk.tileOffsetY) * 2;
      column = chunk.tiles[x];
      column[y] = tile[0];
      return column[y + 1] = tile[1];
    };

    return Layer;

  })();

  window.onload = function() {
    Leo.core.init();
    Leo.event.keydown = function(e) {
      var key;

      key = Leo.util.KEY_CODES;
      switch (e.keyCode) {
        case key.R:
          return window.location.reload();
        default:
          return Leo.player.handleInput(e);
      }
    };
    Leo.event.keyup = function(e) {
      return Leo.player.handleInput(e);
    };
    Leo.player = new Leo.Player({
      spritesheet: 'sprite-olle.png',
      animations: {
        jumpingLeft: {
          frames: [[19, 33, 30, 32, -4, 0, 192]],
          doLoop: false
        },
        jumpingRight: {
          frames: [[19, 0, 30, 32, -8, 0, 192]],
          doLoop: false
        },
        runningLeft: {
          frames: [[19, 33, 30, 32, -4, 0, 192], [49, 33, 13, 32, 4, 0, 192]],
          doLoop: true
        },
        runningRight: {
          frames: [[19, 0, 30, 32, -8, 0, 192], [49, 0, 13, 32, 1, 0, 192]],
          doLoop: true
        },
        standingLeft: {
          frames: [[0, 33, 19, 32, 1, 0, 1000]],
          doLoop: false
        },
        standingRight: {
          frames: [[0, 0, 19, 32, -1, 0, 1000]],
          doLoop: false
        }
      },
      animName: 'standingRight',
      posX: 6,
      posY: 12
    });
    Leo.cycleCallback = function() {
      return Leo.view.cameraPosX = Leo.player.posX - 15;
    };
    Leo.layers.add(new Leo.Layer({
      id: 'mountains',
      spritesheet: 'sprite-background.png',
      isLooping: true,
      parallax: 0.5,
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 10,
          tiles: [[-1, -1, 4, 1, 4, 2, 4, 3, 4, 3, 4, 4, 7, 0], [5, 0, 5, 1, 5, 2, 5, 3, 5, 4, 4, 4, 8, 0], [6, 0, 6, 1, 6, 2, 6, 3, 6, 3, 4, 4, 9, 0], [-1, -1, 7, 1, 7, 2, 7, 3, 7, 4, 4, 4, 10, 0], [-1, -1, -1, -1, 8, 2, 8, 3, 8, 4, 4, 4, 11, 0], [-1, -1, -1, -1, -1, -1, 9, 3, 9, 4, 4, 4, 7, 0], [-1, -1, -1, -1, 10, 2, 10, 3, 10, 4, 4, 4, 8, 0], [-1, -1, 11, 1, 11, 2, 11, 3, 11, 4, 4, 4, 9, 0], [-1, -1, 12, 1, 12, 2, 12, 3, 12, 4, 4, 4, 10, 0], [-1, -1, -1, -1, 13, 2, 13, 3, 13, 4, 4, 4, 11, 0]]
        }
      ]
    }));
    Leo.layers.add(new Leo.Layer({
      id: 'cloud 1',
      spritesheet: 'sprite-background.png',
      isLooping: true,
      parallax: 0.21,
      chunks: [
        {
          chunkOffsetX: 50,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 30,
          tileOffsetY: 3,
          tiles: [[0, 0, 0, 1], [1, 0, 1, 1], [2, 0, 2, 1], [3, 0, 3, 1]]
        }
      ]
    }));
    Leo.layers.add(new Leo.Layer({
      id: 'cloud 2',
      spritesheet: 'sprite-background.png',
      isLooping: true,
      parallax: 0.2,
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 29,
          tileOffsetY: 5,
          tiles: [[0, 0, 0, 1], [1, 0, 1, 1], [2, 0, 2, 1], [3, 0, 3, 1]]
        }
      ]
    }));
    return Leo.layers.add(new Leo.Layer({
      id: 'ground',
      spritesheet: 'sprite-background.png',
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 0, 2, 0, 3, 0, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [4, 0, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3]]
        }, {
          chunkOffsetX: 30,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [4, 0, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 2, 2, 2, 3, 2, 3], [-1, -1, 1, 2, 1, 3, 1, 3], [-1, -1, 3, 2, 3, 3, 3, 3]]
        }
      ]
    }));
  };

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
