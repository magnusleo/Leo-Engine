// Generated by CoffeeScript 1.6.2
(function() {
  var Leo, canvas, ctx, el, latestFrameAt;

  el = function(id) {
    return document.getElementById(id);
  };

  canvas = null;

  ctx = null;

  latestFrameAt = Date.now();

  Leo = window.Leo = {
    init: function() {
      canvas = el('leo-view');
      canvas.width = canvas.width * Leo.view.scale;
      canvas.height = canvas.height * Leo.view.scale;
      ctx = canvas.getContext('2d');
      ctx.imageSmoothingEnabled = false;
      ctx.webkitImageSmoothingEnabled = false;
      Leo.background.sprite = new Image();
      Leo.background.sprite.onload = function() {
        setInterval(function() {
          return Leo.view.cameraPosX = 0.0;
        }, 30000);
        return webkitRequestAnimationFrame(Leo.cycle);
      };
      return Leo.background.sprite.src = '_img/sprite-background.png';
    },
    draw: function() {
      var chunk, column, tile, x, y, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

      ctx.fillStyle = Leo.background.color;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      _ref = Leo.view.chunks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chunk = _ref[_i];
        console.log(chunk.chunkOffsetX);
        _ref1 = chunk.tiles;
        for (x = _j = 0, _len1 = _ref1.length; _j < _len1; x = ++_j) {
          column = _ref1[x];
          for (y = _k = 0, _len2 = column.length; _k < _len2; y = _k += 2) {
            tile = column[y];
            Leo.background.draw(column[y], column[y + 1], (x + chunk.tileOffsetX + Leo.view.cameraPosX + chunk.chunkOffsetX) * Leo.background.tileSize * Leo.view.scale, ((y >> 1) + chunk.tileOffsetY + Leo.view.cameraPosY + chunk.chunkOffsetY) * Leo.background.tileSize * Leo.view.scale);
          }
        }
      }
      Leo.background.draw(3, 0, 5 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(4, 0, 6 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(5, 0, 7 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(6, 0, 8 * Leo.background.tileSize * Leo.view.scale, 6 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(3, 1, 5 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(4, 1, 6 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
      Leo.background.draw(5, 1, 7 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
      return Leo.background.draw(6, 1, 8 * Leo.background.tileSize * Leo.view.scale, 7 * Leo.background.tileSize * Leo.view.scale);
    },
    cycle: function() {
      var cycleLength, thisFrameAt;

      thisFrameAt = Date.now();
      cycleLength = thisFrameAt - latestFrameAt;
      Leo.view.cameraPosX += Leo.view.cameraSpeedX * cycleLength * 0.001;
      Leo.draw();
      latestFrameAt = thisFrameAt;
      return webkitRequestAnimationFrame(Leo.cycle);
    },
    view: {
      scale: 2,
      cameraPosX: 0.0,
      cameraPosY: 0.0,
      cameraSpeedX: -1.0,
      cameraSpeedY: 0.0,
      chunks: [
        {
          chunkOffsetX: 0,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1]]
        }, {
          chunkOffsetX: 30,
          chunkOffsetY: 0,
          colBoxes: [],
          tileOffsetX: 0,
          tileOffsetY: 13,
          tiles: [[-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1], [-1, -1, 0, 0, 0, 1, 0, 1], [-1, -1, 1, 0, 1, 1, 1, 1]]
        }
      ]
    },
    background: {
      tileSize: 16,
      color: '#6ec0ff',
      draw: function(spriteX, spriteY, posX, posY) {
        if (spriteX === -1 || spriteY === -1) {
          return;
        }
        return ctx.drawImage(this.sprite, spriteX * this.tileSize, spriteY * this.tileSize, this.tileSize, this.tileSize, posX, posY, this.tileSize * Leo.view.scale, this.tileSize * Leo.view.scale);
      }
    }
  };

  window.onload = function() {
    return Leo.init();
  };

}).call(this);
